//
//  VerifiableApplicationReducer.swift
//
//
//  Created by Igor Malyarov on 23.03.2025.
//

/// A reducer that processes events in a verifiable application process,
/// updating both the application state and the verification data accordingly.
///
/// The reducer is initialized with two closures:
/// 1. An application reduction closure that updates the application state based on an application event.
/// 2. A verification reduction closure that updates the verification data based on a verification event.
///
/// The generic parameters are as follows:
/// - ApplicationStatus: The type representing the status or result of the application process.
/// - Verification: The type representing the current verification data.
/// - VerificationEvent: The type representing an event related to the verification process.
/// - VerificationEffect: The type representing side effects generated by verification events.
/// - Failure: The type representing an error, conforming to `Error`, that can occur during the process.
public final class VerifiableApplicationReducer<ApplicationStatus, Verification, VerificationEvent, VerificationEffect, Failure: Error> {
    
    private let applicationReduce: ApplicationReduce
    private let verificationReduce: VerificationReduce
    
    /// Initializes a new reducer with the provided reduction closures.
    ///
    /// - Parameters:
    ///   - applicationReduce: A closure that reduces an application event into a new application state and an optional effect.
    ///   - verificationReduce: A closure that reduces a verification event into updated verification data and an optional effect.
    public init(
        applicationReduce: @escaping ApplicationReduce,
        verificationReduce: @escaping VerificationReduce
    ) {
        self.applicationReduce = applicationReduce
        self.verificationReduce = verificationReduce
    }
    
    /// A typealias for the application reduction closure.
    ///
    /// The closure takes:
    /// - The current application state (as part of the reducer's unified state).
    /// - An application event (which is a specific kind of load event for the application process).
    ///
    /// It returns a tuple containing:
    /// - An updated application state.
    /// - An optional application effect.
    public typealias ApplicationReduce = (State.ApplicationState, Event.ApplicationEvent) -> (State.ApplicationState, Effect.ApplicationEffect?)
    
    /// A typealias for the verification reduction closure.
    ///
    /// The closure takes:
    /// - The current verification data.
    /// - A verification event.
    ///
    /// It returns a tuple containing:
    /// - Updated verification data.
    /// - An optional verification effect.
    public typealias VerificationReduce = (Verification, VerificationEvent) -> (Verification, VerificationEffect?)
}

public extension VerifiableApplicationReducer {
    
    /// Processes a given event by reducing it into an updated state and an optional effect.
    ///
    /// Depending on whether the event is an application event or a verification event,
    /// the appropriate reduction closure is invoked.
    ///
    /// - Parameters:
    ///   - state: The current verifiable application state.
    ///   - event: The event to process (either an application event or a verification event).
    /// - Returns: A tuple containing the updated state and an optional unified effect.
    @inlinable
    func reduce(
        _ state: State,
        _ event: Event
    ) -> (State, Effect?) {
        
        var state = state
        var effect: Effect?
        
        switch event {
        case let .application(applicationEvent):
            reduce(&state, &effect, with: applicationEvent)
            
        case let .verification(verificationEvent):
            reduce(&state, &effect, with: verificationEvent)
        }
        
        return (state, effect)
    }
}

public extension VerifiableApplicationReducer {
    
    /// Convenience typealiases for the reducer's unified state, event, and effect.
    ///
    /// These types wrap the underlying components:
    /// - `State` is a `VerifiableApplicationState` that combines the application state and verification data.
    /// - `Event` is a `VerifiableApplicationEvent` that can be either an application event or a verification event.
    /// - `Effect` is a `VerifiableApplicationEffect` that unifies effects produced by application or verification events.
    typealias State = VerifiableApplicationState<ApplicationStatus, Verification, Failure>
    
    /// The event type used by the reducer.
    typealias Event = VerifiableApplicationEvent<ApplicationStatus, VerificationEvent, Failure>
    
    /// The effect type produced by the reducer.
    typealias Effect = VerifiableApplicationEffect<VerificationEffect>
}

extension VerifiableApplicationReducer {
    
    /// Reduces an application event by updating the application state and mapping the produced effect.
    ///
    /// This method invokes the `applicationReduce` closure using the current application state and the given event,
    /// then updates the unified state and maps the effect into a unified application effect.
    ///
    /// - Parameters:
    ///   - state: The current state, passed as an inout parameter.
    ///   - effect: The optional effect to be updated, passed as an inout parameter.
    ///   - applicationEvent: The application event to reduce.
    @usableFromInline
    func reduce(
        _ state: inout State,
        _ effect: inout Effect?,
        with applicationEvent: Event.ApplicationEvent
    ) {
        let (application, applicationEffect) = applicationReduce(state.applicationState, applicationEvent)
        state.applicationState = application
        effect = applicationEffect.map { .application($0) }
    }
    
    /// Reduces a verification event by updating the verification data and mapping the produced effect.
    ///
    /// This method invokes the `verificationReduce` closure using the current verification data and the given event,
    /// then updates the unified state and maps the effect into a unified verification effect.
    ///
    /// - Parameters:
    ///   - state: The current state, passed as an inout parameter.
    ///   - effect: The optional effect to be updated, passed as an inout parameter.
    ///   - verificationEvent: The verification event to reduce.
    @usableFromInline
    func reduce(
        _ state: inout State,
        _ effect: inout Effect?,
        with verificationEvent: VerificationEvent
    ) {
        let (verification, verificationEffect) = verificationReduce(state.verification, verificationEvent)
        state.verification = verification
        effect = verificationEffect.map { .verification($0) }
    }
}
